functor MkRefAStarCore(structure Table:TABLE
structure PQ:PQUEUE
where type Key.t=real):ASTAR=struct

structure O00OO000OO = Table
structure O0OO00OOO0O00OO00 = PQ
structure Set=O00OO000OO.Set
structure O0O00OOO00OO0O00O00=Set.Seq
type weight=real
type vertex=Set.key
type edge=vertex*vertex*weight
type heuristic=vertex-> real
type 'O0O00O00O000O O000OOO0O0='O0O00O00O000O O00OO000OO.table
type graph=(weight O000OOO0O0)O000OOO0O0

(*ONLY FOR TESTING; DON'T COPY THE CODE*)
fun makeGraph(O0OOO00OOOOO00:edge O0O00OOO00OO0O00O00.seq):graph=let
val O00OO00000O0OO0=O00OO000OO.collect(O0O00OOO00OO0O00O00.map(fn(O0O0O0O0OO00,O00O00O000OO00,O000OO00OO00)=>(O0O0O0O0OO00,(O00O00O000OO00,O000OO00OO00)))O0OOO00OOOOO00)in
O00OO000OO.map O00OO000OO.fromSeq O00OO00000O0OO0
end

(*ONLY FOR TESTING; DON'T COPY THE CODE*)
fun findPath OO0O0O000OOO00OOO OO00O00OO000OO00(OOOOO0OO0OOO00O0,OOO0OO00O00O000)=let
fun O00O000O00O0O0(O0O00OO0OOO0O0O00O)=case O00OO000OO.find OO00O00OO000OO00 O0O00OO0OOO0O0O00O
of NONE=>O00OO000OO.empty()|SOME O000OOOOO0=>O000OOOOO0
fun OOOOOO0O00OOO O000OOOO00O OOO0OOOO00O00O0OOO=case O0OO00OOO0O00OO00.deleteMin OOO0OOOO00O00O0OOO
of(NONE,_)=>O000OOOO00O|(SOME(O000OOO00O0OO,O0O00OO0OOO0O0O00O),OOO0OOOO00O00O0OOO')=>case O00OO000OO.find O000OOOO00O O0O00OO0OOO0O0O00O
of SOME _=>OOOOOO0O00OOO O000OOOO00O OOO0OOOO00O00O0OOO'|NONE=>let
val O0O0OO000OOOO=O00OO000OO.insert(fn(O00O0O0OOOOOO0000OO,_)=>O00O0O0OOOOOO0000OO)val O000OOOO00O'=O0O0OO000OOOO(O0O00OO0OOO0O0O00O,O000OOO00O0OO-(OO0O0O000OOO00OOO O0O00OO0OOO0O0O00O))O000OOOO00O
fun O00000O00OO(O00OO00000OOO00OO0,(OOO0OOO000O0O00O00O,O000OO00OO00))=O0OO00OOO0O00OO00.insert(O000OOO00O0OO+O000OO00OO00-(OO0O0O000OOO00OOO O0O00OO0OOO0O0O00O)+(OO0O0O000OOO00OOO OOO0OOO000O0O00O00O),OOO0OOO000O0O00O00O)O00OO00000OOO00OO0
val OOO0OOOO00O00O0OOO''=O00OO000OO.iter O00000O00OO OOO0OOOO00O00O0OOO'(O00O000O00O0O0 O0O00OO0OOO0O0O00O)in if(Set.find OOO0OO00O00O000 O0O00OO0OOO0O0O00O)then O000OOOO00O' else OOOOOO0O00OOO O000OOOO00O' OOO0OOOO00O00O0OOO'' end
val O0OO000O0OO0OO0O00O=OOOOOO0O00OOO(O00OO000OO.empty())(O0OO00OOO0O00OO00.fromList(O0O00OOO00OO0O00O00.toList(O0O00OOO00OO0O00O00.map(fn OOO00O0O0OO0000000=>((OO0O0O000OOO00OOO OOO00O0O0OO0000000),OOO00O0O0OO0000000))(Set.toSeq OOOOO0OO0OOO00O0))))val O000OOOO0O0=O00OO000OO.toSeq(O00OO000OO.extract(O0OO000O0OO0OO0O00O,OOO0OO00O00O000))in
if(O0O00OOO00OO0O00O00.length O000OOOO0O0=0)then NONE
else SOME(O0O00OOO00OO0O00O00.nth O000OOOO0O0 0)end
end;